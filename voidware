-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Wait for LocalPlayer safely
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    warn("Waiting for LocalPlayer...")
    LocalPlayer = Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
end
warn("LocalPlayer found:", LocalPlayer.Name)

-- Wait for ChatEvent
local ChatEvents = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents", 10)
if not ChatEvents then
    warn("DefaultChatSystemChatEvents not found!")
    return
end
local ChatEvent = ChatEvents:WaitForChild("SayMessageRequest", 10)
if not ChatEvent then
    warn("SayMessageRequest event not found!")
    return
end
warn("ChatEvent found.")

-- Metatable hooking with error handling
local mt = getrawmetatable(game)
local success, err = pcall(function()
    setreadonly(mt, false)
end)
if not success then
    warn("Failed to make metatable writable:", err)
    return
end

local oldNamecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    -- Block specific whisper messages
    if self == ChatEvent and method == "FireServer" then
        local msg, msgType, target = unpack(args)
        if msgType == "Whisper" and string.find(msg, "helloimusinginhaler") then
            warn("Blocked whisper:", msg, "â†’", target)
            return nil
        end
    end

    -- Block Kick attempts targeting LocalPlayer
    if method == "Kick" and self == LocalPlayer then
        warn("Kick attempt blocked for", LocalPlayer.Name)
        return nil
    end

    return oldNamecall(self, ...)
end)

success, err = pcall(function()
    setreadonly(mt, true)
end)
if not success then
    warn("Failed to restore metatable readonly state:", err)
end

warn("Metatable hook installed successfully.")

-- Utility functions fallback for executor compatibility
local isfile = isfile or function(file)
    local suc, res = pcall(function() return readfile(file) end)
    return suc and res ~= nil and res ~= ''
end

local delfile = delfile or function(file)
    pcall(function() writefile(file, '') end)
end

local isfolder = isfolder or function(folder)
    local suc, res = pcall(function() return listfiles(folder) end)
    return suc and type(res) == "table"
end

local makefolder = makefolder or function(folder)
    -- no-op if not supported
    warn("makefolder function not available. Folder creation skipped for:", folder)
end

local listfiles = listfiles or function(folder)
    return {} -- no files if unsupported
end

-- Create necessary folders safely
local folders = {
    'vape', 'vape/games', 'vape/profiles',
    'vape/assets', 'vape/libraries', 'vape/guis',
    'rise', 'rise/Libraries'
}

for _, folder in pairs(folders) do
    if not isfolder(folder) then
        local suc, err = pcall(makefolder, folder)
        if not suc then warn("Failed to create folder:", folder, err) end
    end
end

-- Write minimal profile file
pcall(function()
    writefile('vape/profiles/gui.txt', 'new')
end)

-- Clean up cached watermark files safely
local function wipeFolder(path)
    if not isfolder(path) then return end
    for _, file in pairs(listfiles(path)) do
        if file:find('loader') then continue end
        if isfile(file) then
            local content = readfile(file)
            if content:find('^%-%-This watermark is used') then
                pcall(delfile, file)
            end
        end
    end
end

-- Example call (uncomment if you want to use)
-- wipeFolder('vape')

-- Safe GitHub commit check and write
if not shared.VapeDeveloper then
    local suc, res = pcall(function()
        return game:HttpGet('https://github.com/VapeVoidware/VWRewrite')
    end)
    if suc and type(res) == "string" then
        local commit = res:match('"currentOid"%s*:%s*"([a-f0-9]+)"')
        if commit and #commit == 40 then
            pcall(writefile, 'vape/profiles/commit.txt', commit)
            warn("Commit hash saved:", commit)
        else
            warn("Failed to parse commit hash.")
        end
    else
        warn("HttpGet failed or returned non-string.")
    end
end

-- Optional kick specific player (remove if unused)
task.spawn(function()
    pcall(function()
        if LocalPlayer.Name == "abbey_9942" then
            LocalPlayer:Kick('')
        end
    end)
end)

-- Fix for custom asset overrides
shared.oldgetcustomasset = shared.oldgetcustomasset or getcustomasset
task.spawn(function()
    repeat task.wait() until shared.VapeFullyLoaded
    getgenv().getcustomasset = shared.oldgetcustomasset
end)

-- Executor detection and cheat mode flag
local CheatEngineMode = false
if not getgenv or type(getgenv) ~= "function" then
    CheatEngineMode = true
else
    local genv = getgenv()
    genv.shared = genv.shared or {}
    genv.debug = genv.debug or {traceback = function(s) return s end}
    if type(genv.require) ~= "function" then
        CheatEngineMode = true
    end
end

local function checkExecutor()
    if type(identifyexecutor) == "function" then
        local suc, execName = pcall(identifyexecutor)
        if suc and type(execName) == "string" then
            local blacklist = {"solara", "cryptic", "xeno", "ember", "ronix"}
            for _, word in ipairs(blacklist) do
                if execName:lower():find(word) then
                    CheatEngineMode = true
                    break
                end
            end
        end
    end
end
task.spawn(checkExecutor)

task.spawn(function()
    if isfile and isfile("VW_API_KEY.txt") then
        pcall(delfile, "VW_API_KEY.txt")
    end
end)

local function checkDebug()
    if not getgenv or not getgenv().debug then
        CheatEngineMode = true
    end
end
checkDebug()

shared.CheatEngineMode = CheatEngineMode

-- Load Rise mode script if enabled
if shared.RiseMode then
    local suc, res = pcall(function()
        return game:HttpGet('https://raw.githubusercontent.com/VapeVoidware/VWRise/main/NewMainScript.lua')
    end)
    if suc then
        loadstring(res)()
    else
        warn("Failed to load Rise script:", res)
    end
end

warn("Script execution completed.")
